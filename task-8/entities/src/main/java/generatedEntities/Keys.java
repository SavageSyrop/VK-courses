/*
 * This file is generated by jOOQ.
 */
package generatedEntities;


import generatedEntities.tables.Company;
import generatedEntities.tables.FlywaySchemaHistory;
import generatedEntities.tables.Product;
import generatedEntities.tables.Role;
import generatedEntities.tables.UserRole;
import generatedEntities.tables.Users;
import generatedEntities.tables.records.CompanyRecord;
import generatedEntities.tables.records.FlywaySchemaHistoryRecord;
import generatedEntities.tables.records.ProductRecord;
import generatedEntities.tables.records.RoleRecord;
import generatedEntities.tables.records.UserRoleRecord;
import generatedEntities.tables.records.UsersRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CompanyRecord> COMPANY_NAME_KEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_name_key"), new TableField[] { Company.COMPANY.NAME }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_PKEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PKEY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pkey"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<RoleRecord> ROLE_PKEY = Internal.createUniqueKey(Role.ROLE, DSL.name("role_pkey"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<UserRoleRecord> USER_ROLE_PKEY = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("user_role_pkey"), new TableField[] { UserRole.USER_ROLE.USER_ID, UserRole.USER_ROLE.ROLE_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_NAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_name_key"), new TableField[] { Users.USERS.NAME }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
}
